# frontend/Dockerfile.prod

# --- Etapa de Construcción (Builder) ---
# Usamos una imagen alpine para que sea ligera
FROM node:18-alpine AS builder


WORKDIR /app

# Copiar archivos de dependencias y instalar
# Usamos 'npm ci' que es más rápido y seguro para builds de producción, ya que usa el package-lock.json
COPY package.json package-lock.json ./
RUN npm ci

# Copiar el resto del código fuente
COPY . .

# Construir la aplicación para producción
RUN npm run build

# --- Etapa de Producción (Final) ---
# Usar una imagen de Nginx súper ligera
FROM nginx:1.25-alpine

# Eliminar la configuración por defecto de Nginx
RUN rm /etc/nginx/conf.d/default.conf

# Copiar nuestra configuración personalizada de Nginx (necesitarás crear este archivo)
COPY nginx/nginx.conf /etc/nginx/conf.d/default.conf

# Copiar los archivos construidos de la etapa 'builder' al directorio que Nginx sirve por defecto
COPY --from=builder /app/dist /usr/share/nginx/html

# Cambiar el propietario de los archivos para que el proceso de Nginx (no-root por defecto en esta imagen) pueda leerlos
RUN chown -R nginx:nginx /usr/share/nginx/html /var/cache/nginx

# Exponer el puerto 80 (puerto estándar de Nginx)
EXPOSE 80

# El comando por defecto de la imagen de Nginx es ["nginx", "-g", "daemon off;"], que ya es lo que queremos.
